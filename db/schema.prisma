// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
  Project  Project[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Project {
  id                  Int                             @id @default(autoincrement())
  createdAt           DateTime                        @default(now())
  updatedAt           DateTime                        @updatedAt
  name                String
  ProjectDependency   ProjectDependency[]
  Check               Check[]
  managedDependencies ManagedDependenciesOnProjects[]
  status              String?
  user                User                            @relation(fields: [userId], references: [id])
  userId              Int                             @default(0)
}

model Check {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  projectDependencyId Int?
  run                 Int
  pass                Boolean
  datetime            DateTime
  ProjectDependency   ProjectDependency? @relation(fields: [projectDependencyId], references: [id])
  projectId           Int?
  Project             Project?           @relation(fields: [projectId], references: [id])
}

model ProjectDependency {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String
  headers   Json     @default("{}")
  data      Json     @default("{}")
  projectId Int
  Project   Project? @relation(fields: [projectId], references: [id])
  Check     Check[]
}

model ManagedDependency {
  id        Int                             @id @default(autoincrement())
  projects  ManagedDependenciesOnProjects[]
  name      String
  checks    Json[]                          @default([])
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt
}

model ManagedDependenciesOnProjects {
  project             Project           @relation(fields: [projectId], references: [id])
  projectId           Int
  managedDependency   ManagedDependency @relation(fields: [managedDependencyId], references: [id])
  managedDependencyId Int
  assignedAt          DateTime          @default(now())

  @@id([projectId, managedDependencyId])
}
